(function() {
  var crypto, http, invoke, pad, querystring, timestamp;

  crypto = require("crypto");

  http = require("https");

  querystring = require("querystring");

  pad = function(n) {
    if (n < 10) {
      return "0" + n;
    } else {
      return n;
    }
  };

  timestamp = function() {
    var day, hours, minutes, month, now, year;
    now = new Date();
    year = now.getUTCFullYear();
    month = pad(now.getUTCMonth() + 1);
    day = pad(now.getUTCDate());
    hours = pad(now.getUTCHours());
    minutes = pad(now.getUTCMinutes());
    return "" + year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":00Z";
  };

  invoke = function(endpoint, key, secret, command, parameters, callback) {
    var digest, hmac, key, map, name, names, query, request, toSign, value, _i, _len;
    map = {
      AWSAccessKeyId: key,
      Action: command,
      SignatureMethod: "HmacSHA256",
      Timestamp: timestamp(),
      SignatureVersion: 2,
      Version: "2011-05-15"
    };
    for (key in parameters) {
      value = parameters[key];
      map[key] = typeof parameters[key] === 'function' ? parameters[key]() : parameters[key];
    }
    names = (function() {
      var _results;
      _results = [];
      for (key in map) {
        value = map[key];
        _results.push(key);
      }
      return _results;
    })();
    names.sort();
    query = [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      query.push(querystring.escape(name) + "=" + querystring.escape(map[name]));
    }
    toSign = "GET\n" + ("ec2." + endpoint + ".amazonaws.com\n") + "/\n" + query.join("&");
    hmac = crypto.createHmac("sha256", secret);
    hmac.update(toSign);
    digest = querystring.escape(hmac.digest("base64"));
    query.push("Signature=" + digest);
    request = http.request({
      port: 443,
      host: "ec2." + endpoint + ".amazonaws.com",
      method: "GET",
      path: "/?" + query.join("&"),
      headers: {
        host: "ec2." + endpoint + ".amazonaws.com"
      }
    }, function(response) {
      var body;
      body = "";
      response.setEncoding("utf8");
      response.on("data", function(chunk) {
        return body += chunk;
      });
      response.on("end", function() {
        return callback(null, response, body);
      });
      return response.on("error", function(error) {
        return callback(error);
      });
    });
    request.on("error", function(error) {
      return callback(error);
    });
    request.end();
    return true;
  };

  module.exports.invoke = invoke;

}).call(this);
