(function() {
  var AmazonEC2Client, ResponseParser, events, invoke, noop, sys;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  sys = require("sys");

  events = require("events");

  ResponseParser = require("./response").ResponseParser;

  invoke = require("./request").invoke;

  noop = function() {
    return true;
  };

  AmazonEC2Client = (function() {

    __extends(AmazonEC2Client, events.EventEmitter);

    function AmazonEC2Client(_options) {
      var _base;
      this._options = _options;
      this.execute = __bind(this.execute, this);
      this._commands = [];
      (_base = this._options).endpoint || (_base.endpoint = "us-east-1");
    }

    AmazonEC2Client.prototype.call = function(name, parameters, callback) {
      return this._push(false, name, parameters, callback);
    };

    AmazonEC2Client.prototype.poll = function(name, parameters, callback) {
      return this._push(true, name, parameters, callback);
    };

    AmazonEC2Client.prototype._push = function(retry, name, parameters, callback) {
      if (typeof parameters === "function") {
        callback = parameters;
        parameters = {};
      }
      parameters || (parameters = {});
      callback || (callback = noop);
      return this._commands.push({
        name: name,
        parameters: parameters,
        callback: callback,
        retry: retry
      });
    };

    AmazonEC2Client.prototype.execute = function() {
      var command;
      var _this = this;
      if (this._commands.length === 0) {
        return this.emit("end");
      } else {
        command = this._commands.shift();
        return invoke(this._options.endpoint, this._options.key, this._options.secret, command.name, command.parameters, function(error, response, body) {
          var parser, statusCode;
          if (error) {
            return _this.emit("error", error);
          } else {
            statusCode = Math.floor(response.statusCode / 100);
            if (command.callback || statusCode !== 2) {
              parser = new ResponseParser;
              return parser.read(body, function(error, struct) {
                var execute, outcome;
                if (error) {
                  _this.emit("error", error, null, response.statusCode);
                  return;
                }
                if (statusCode === 2) {
                  try {
                    outcome = command.callback(struct);
                  } catch (_) {
                    _this.emit("error", _, response.statusCode);
                    return;
                  }
                  if (command.retry && !outcome) {
                    _this._commands.unshift(command);
                    execute = function() {
                      return _this.execute();
                    };
                    return setTimeout(execute, 1000);
                  } else {
                    return _this.execute();
                  }
                } else {
                  console.log(struct);
                  return _this.emit("error", null, struct, response.statusCode);
                }
              });
            } else {
              return _this.execute();
            }
          }
        });
      }
    };

    return AmazonEC2Client;

  })();

  module.exports.createClient = function(options) {
    return new AmazonEC2Client(options);
  };

}).call(this);
